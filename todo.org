* TODO get a minimal version of the app running
  - [ ] sequentially picking lifepaths
    - [ ] write lifepath decoders for api module
  - [ ] think about a 'suggestions' endpoint
        ie filter by 'i meet the requirements' - existing one does this
        or 'satisfies my unmet requirements'
  - [ ] include skill roots in lifepath skills response
  - [ ] get google oauth flow working
  - [ ] integration tests for endpoint
  - [ ] unit tests for model
  - [ ] unit tests for json decoders

* TODO find a better way to handle same lifepath in different settings
** the diminishing returns rules care
** for now, just have the diminishing returns do their own truncation
   
* TODO unit tests covering the seeded data
  - [ ] custom test runner
    https://doc.rust-lang.org/unstable-book/language-features/custom-test-frameworks.html
  - [ ] check weird lifepaths
  - [ ] test query layer (make query layer)

* TODO set up a deployment w/heroku or aws
** test that the app runs pending migrations on startup
** have a way to reset the book data/the db in general

* TODO think about how to handle stock common traits & born lifepaths
** need a table of common traits by stock?
** how to handle human cultural traits?
** and fey blood
*** implement skill restrictions as requiring the specific common trait

* TODO enter traits list
** need to know how to implement them first?
** we at least want the costs available

* TODO think about limits to put on the lifepath req table
** like depth/complexity
** should that just be a request validation rather than a constraint?

* TODO how do we ensure integrity of lifepath requirements?
** need a join table that duplicates which lps are referenced in each other's json

* db changes
** TODO think about how to do appropriate weapons
*** treat it as any other skill until the point buy phase
**** also need to special case it for restrictions (ie counts as sword)
**** add a step to the process where they're forced to choose weapon skills to replace it
**** hardcode appropriate weapons into the specific skill restrictions
***** ie now it requires sword or app. weap.
** think about how to do lifepath requirements
*** store predicates as data
*** types of predicates:
**** and, or, any of
**** has specific lp, has specific trait
**** second lp, second or third lp
**** final age (thinker), current age (crazy old sailor)
**** lifepath from a setting (military order)
***** can't just list them, not good for user lifepath settings
**** specific trait (two parts)
***** they must have access to that trait
***** they must purchase that trait when actually making the character
**** a wife lifepath's husband lp (lady, dame)

* TODO have the app seed book data in a smart way
** add a 'migration' tracking table for book seeds?
  ie, diesel migration adds a todo list row to the seed table,
  then seed fn looks at that table

* TODO move the HALF_PREVIOUS constant to a repo module and make it private
** db_string method on ResCalc enum

* TODO rethink tools requirement type
** TODO weapon should be specific (arms, bow, etc)
** TODO musical instruments should get their own category
** TODO special categories like logistics/estate management
*** better to just have a generic tool description field?
*** might want to have a field to specify item id if/when there is such a thing
*** should leave tool requirement out of db for now?

* TODO are skills unique by name?
** torture changes based on if an orc takes it
*** for now, we're renaming the orc one
** user created stuff might need to be tied to a stock
*** multiple versions of sorcery, for example
*** we could have a user equivalent of a book?
**** this would make things a lot simpler
**** create a book for the user when they make their account
**** use the same schema for them as for the official stuff
**** allow creating multiple books #someday

* TODO how to do elven skill songs
** we could just put them in the skills table
*** will root
*** elves only (allowed by fey blood?)

* validations that need triggers
** leads should only point to settings in the same stock
** lifepath names should be unique within a stock
** list position for skills and traits should be contiguous
** think about changing the schema to fix these
** are triggers slow? fine for this project?
* TODO consider using diesel associations
** could simplify the leads/skill lists/trait lists stuff
** seems like there's some limitations:
   https://github.com/diesel-rs/diesel/issues/89
* TODO think of a better url for the filtered lifepath list endpoint
* TODO advisor to the court
  - [ ] add calculation rule option for general skill points
  - [ ] seeding needs to account for it existing 
        year range is 1-3; 10 res per year, 1 gsp per year
