* TODO seed skill lists
* TODO seed trait lists
* TODO add more dwarf settings
** resolve config todos first
*** leads with stock-distinct names
*** unit tests for broken skill & trait links
** settings:
  - [ ] guilder
  - [ ] artificer
  - [ ] noble
  - [ ] host
  - [ ] outcast

* TODO think about how to handle common traits & born lifepaths
** and fey blood
** need a table of common traits by stock?

* db changes
** think about a nice way to ensure list_position correctness (can't use check)
** TODO make everything polymorphic on pageref vs user_id
** TODO leads table (constraint for same stock?)
** TODO think about how to do appropriate weapons
** think about how to do lifepath requirements
*** store predicates as data
*** types of predicates:
**** and, or, any of
**** has specific lp, has specific trait
**** second lp, second or third lp
**** final age (thinker), current age (crazy old sailor)
**** lifepath from a setting (military order)
***** can't just list them, not good for user lifepath settings
**** specific trait (two parts)
***** they must have access to that trait
***** they must purchase that trait when actually making the character
**** a wife lifepath's husband lp (lady, dame)
** TODO change book back to just a table instead of an enum

* TODO have the app run pending migrations on startup
* TODO have the app seed book data in a smart way
** add a 'migration' tracking table for book seeds?
  ie, diesel migration adds a todo list row to the seed table,
  then seed fn looks at that table
* TODO find a way to seed the test database one time
** make a custom test runner
   https://doc.rust-lang.org/unstable-book/language-features/custom-test-frameworks.html
** bin for recreating test database?
*** ie recreate in the runner every time, or just run pending migrations in the runner?
** use diesel's test_transaction

* TODO move the HALF_PREVIOUS constant to a repo module and make it private
** db_string method on ResCalc enum
* TODO think about skill forks
** maybe just leave them out
* TODO skill restrictions (elves only, etc)
