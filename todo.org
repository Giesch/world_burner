* TODO get a minimal version of the app running [3/5]
  - [X] sequentially picking lifepaths
    - [X] get dnd working; able to drop first lifepath of a new block
    - [X] add validation to dnd
  - [X] easy search for allowed next lifepaths [4/4]
    - [X] move lifepath filtering/search into elm
          load all lps for the stock on launch
    - [X] come up with a better search ui
          any-field text search, and then other filters under 'advanced'
    - [X] add filter for fits before/after each lifeblock
    - [X] allow clicking on a warning to filter by
          'mentioned in the requirement'
  - [-] unit tests for pure elm modules
    - [X] validation
    - [ ] dragstate
    - [X] attribute ids
  - [X] unit tests for json decoders
  - [ ] unit tests for lifepaths service (ie the joins)

* TODO visual redesign
** not a final one, just a not-look-like-ass one
** start using a storybook?

* TODO see if it's possible to replace the BeaconId stuff with something more structured
** like ["id-type", index] instead of assigned ranges
** add real decoders & encoders, using string constants
** should also check index ranges

* TODO set up a deployment & CI w/heroku or aws
** test that the app runs pending migrations on startup
** have a way to reset the book data/the db in general

* TODO enter traits list
* TODO think about how to handle stock common traits & born lifepaths
** need a table of common traits by stock?
** how to handle human cultural traits?
** and fey blood
*** implement skill restrictions as requiring the specific common trait
*** traits have to be able to grant other traits, including a choice from a list

* db changes
** TODO refactor check constraints into separate tables where possible
- [ ] year range
- [ ] stat mod & stat mod val pair
- [ ] find a nicer way to do skill roots
** TODO think about how to do appropriate weapons
*** treat it as any other skill until the point buy phase
**** also need to special case it for restrictions (ie counts as sword)
**** add a step to the process where they're forced to choose weapon skills to replace it
**** hardcode appropriate weapons into the specific skill restrictions
***** ie now it requires sword or app. weap.
**** could special case handle it when moving to pointbuy
***** remove app. weapons from their skill list and add all weapon skills
how does that work with user stocks? let them define their own app. weapons list?
** think about how to do lifepath requirements
*** store predicates as data
*** types of predicates:
**** and, or, any of
**** has specific lp, has specific trait
**** second lp, second or third lp
**** final age (thinker), current age (crazy old sailor)
**** lifepath from a setting (military order)
***** can't just list them, not good for user lifepath settings
**** specific trait (two parts)
***** they must have access to that trait
***** they must purchase that trait when actually making the character
**** a wife lifepath's husband lp (lady, dame)

* TODO have the app seed book data in a smart way
** add a 'migration' tracking table for book seeds?
  ie, diesel migration adds a todo list row to the seed table,
  then seed fn looks at that table

* TODO move the res calc constants to a repo module and make it private
** db_string method on ResCalc enum
** consider making these a database enum

* TODO rethink tools requirement type
** TODO weapon should be specific (arms, bow, etc)
** TODO musical instruments should get their own category
** TODO special categories like logistics/estate management
*** better to just have a generic tool description field?
*** might want to have a field to specify item id if/when there is such a thing
*** should leave tool requirement out of db for now?

* TODO are skills unique by name?
** torture changes based on if an orc takes it
*** for now, we're renaming the orc one
** user created stuff might need to be tied to a stock
*** multiple versions of sorcery, for example
*** we could have a user equivalent of a book?
**** this would make things a lot simpler
**** create a book for the user when they make their account
**** use the same schema for them as for the official stuff
**** allow creating multiple books #someday

* TODO how to do elven skill songs
** we could just put them in the skills table
*** will root
*** elves only (allowed by fey blood?)

* validations that need triggers
** leads should only point to settings in the same stock
** lifepath names should be unique within a stock
** list position for skills and traits should be contiguous
** think about changing the schema to fix these
** are triggers slow? fine for this project?
* TODO consider using diesel associations
** could simplify the leads/skill lists/trait lists stuff
** seems like there's some limitations:
   https://github.com/diesel-rs/diesel/issues/89
* TODO think of a better url for the filtered lifepath list endpoint
* TODO advisor to the court
  - [ ] add calculation rule option for general skill points
  - [ ] seeding needs to account for it existing 
        year range is 1-3; 10 res per year, 1 gsp per year
* TODO make the lifepaths repo return and log errors properly
** look into tracing or simple logger crates

* Soon (TM)
** TODO find a better way to handle same lifepath in different settings
*** the diminishing returns rules care
*** for now, just have the diminishing returns do their own truncation
*** could just remove the unique index on names, then check lifepath name
** TODO closest bounding beacon should go by distance/overlap
the whole point was to not do dropzones
** TODO handle the errors from draggable.js in decodeDragEvents
** TODO add on-hover text explaining the ui
** TODO use thiserror and anyhow for rust errors
** TODO use diesel associations for lifepaths?
** TODO add nice backend logging with pretty env logger or tracing
** TODO make lifepaths expandable/collapsable
** TODO replace all Elm Debug.todo and Debug.log calls with an error view
*** toast popup and reset to last known good state
*** link to a page with an email and error code?
** TODO replace the DragState module with a proper state machine with phantom types
** TODO add social login with google oauth or something
*** maybe email-only login like execute program?
** TODO improve search
*** make it fuzzy
*** add search hit highlighting

* Someday
** TODO use a static site generator and load the book lifepaths at build time
** TODO do all filtering and searching of lifepaths on the client side
** TODO replace jsonb requirement predicates with a real sql tree thing
*** check constraints for tree node types and a one-to-many self join for children
**** what does that query look like?
*** enforce integrity (ie can't require a deleted lifepath, can't delete a required lifepath)
*** use some special pg plugin?
*** what depth/complexity limits should there be? enforced on requests or as db constraints?
** TODO add prod frontend error logging with rollbar or whatever
** TODO make the app compile to a binary in release mode
*** spa routes should depend on a flag; only use NamedFile in dev
** TODO more data integrity tests for the book lifepaths (eg for traits, too)
